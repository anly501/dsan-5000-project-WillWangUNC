[
  {
    "objectID": "code.html",
    "href": "code.html",
    "title": "",
    "section": "",
    "text": "Link to code: https://github.com/anly501/dsan-5000-project-WillWangUNC"
  },
  {
    "objectID": "aboutyou.html",
    "href": "aboutyou.html",
    "title": "About Me",
    "section": "",
    "text": "from PIL import Image\nmyImage = Image.open(\"./images/e3ea6870d90cc5b2bbf7e24c4242f75.jpg\")\nmyImage.show()"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "5000-website-Zenan",
    "section": "",
    "text": "This is a Quarto website.\nTo learn more about Quarto websites visit https://quarto.org/docs/websites."
  },
  {
    "objectID": "aboutyou.html#poloar",
    "href": "aboutyou.html#poloar",
    "title": "About Me",
    "section": "",
    "text": "1 + 1\n\n2"
  },
  {
    "objectID": "aboutyou.html#a-photo-of-me",
    "href": "aboutyou.html#a-photo-of-me",
    "title": "About Me",
    "section": "A photo of me:",
    "text": "A photo of me:\n\nfrom PIL import Image\nmyImage = Image.open(\"./images/e3ea6870d90cc5b2bbf7e24c4242f75.jpg\")\nmyImage.show()"
  },
  {
    "objectID": "aboutyou.html#a-quick-self-introduction",
    "href": "aboutyou.html#a-quick-self-introduction",
    "title": "About Me",
    "section": "",
    "text": "from PIL import Image\nmyImage = Image.open(\"./images/e3ea6870d90cc5b2bbf7e24c4242f75.jpg\")\nmyImage.show()"
  },
  {
    "objectID": "aboutyou.html#backgrounds",
    "href": "aboutyou.html#backgrounds",
    "title": "About Me",
    "section": "Backgrounds:",
    "text": "Backgrounds:\nHey everyone, I am Zenan Wang, commonly known as Will, hailing from Nanjing, China. I completed my undergraduate studies at UNC Chapel Hill, achieving a double major in Mathematics and Statistics. My interests include cycling, fitness activities, and indulging in video games for leisure.\n\nLinkedin link: https://www.linkedin.com/in/zenan-wang-062695260/"
  },
  {
    "objectID": "introduction.html",
    "href": "introduction.html",
    "title": "The competition between electric cars and gas cars",
    "section": "",
    "text": "link: https://dash.harvard.edu/bitstream/handle/1/33826493/CORNELL-DOCUMENT-2017.pdf?isAllowed=y&sequence=1"
  },
  {
    "objectID": "introduction.html#first-publication-the-environmental-benefits-of-electric-vehicles-as-a-function-of-renewable-energy",
    "href": "introduction.html#first-publication-the-environmental-benefits-of-electric-vehicles-as-a-function-of-renewable-energy",
    "title": "The competition between electric cars and gas cars",
    "section": "",
    "text": "link: https://dash.harvard.edu/bitstream/handle/1/33826493/CORNELL-DOCUMENT-2017.pdf?isAllowed=y&sequence=1"
  },
  {
    "objectID": "introduction.html#second-publication-insights-for-more-reliable-electric-vehicles",
    "href": "introduction.html#second-publication-insights-for-more-reliable-electric-vehicles",
    "title": "The competition between electric cars and gas cars",
    "section": "Second publication: Insights for More Reliable Electric Vehicles",
    "text": "Second publication: Insights for More Reliable Electric Vehicles\nlink: https://data.consumerreports.org/wp-content/uploads/2022/01/Consumer-Reports-Insights-for-More-Reliable-Electric-Vehicles-Jan-2022.pdf"
  },
  {
    "objectID": "introduction.html#the-competition-between-electric-vehicles-evs-and-traditional-gasoline-powered-cars-is-a-complex-and-dynamic-topic-that-encompasses-various-dimensions-such-as-technology-economics-environmental-impact-and-consumer-preferences.-here-is-a-summarized-overview-along-with-insights-into-future-trends-and-diverse-perspectives-found-in-the-literature",
    "href": "introduction.html#the-competition-between-electric-vehicles-evs-and-traditional-gasoline-powered-cars-is-a-complex-and-dynamic-topic-that-encompasses-various-dimensions-such-as-technology-economics-environmental-impact-and-consumer-preferences.-here-is-a-summarized-overview-along-with-insights-into-future-trends-and-diverse-perspectives-found-in-the-literature",
    "title": "The competition between electric cars and gas cars",
    "section": "The competition between electric vehicles (EVs) and traditional gasoline-powered cars is a complex and dynamic topic that encompasses various dimensions such as technology, economics, environmental impact, and consumer preferences. Here is a summarized overview along with insights into future trends and diverse perspectives found in the literature:",
    "text": "The competition between electric vehicles (EVs) and traditional gasoline-powered cars is a complex and dynamic topic that encompasses various dimensions such as technology, economics, environmental impact, and consumer preferences. Here is a summarized overview along with insights into future trends and diverse perspectives found in the literature:\n\nEnvironmental Concerns:\n\nPro-EV Perspective: Electric vehicles are often considered more environmentally friendly due to their lower or zero emissions during operation.\nPro-Gas Car Perspective: Critics argue that the overall environmental impact of EVs depends on factors like electricity sources and battery production, which may involve resource-intensive processes.\n\n\n\nTechnological Advancements:\n\nPro-EV Perspective: Rapid advancements in battery technology are increasing the range and reducing the cost of electric vehicles, making them more competitive and appealing to consumers.\nPro-Gas Car Perspective: Traditional vehicles are benefiting from advancements in internal combustion engines and alternative fuels, maintaining their relevance and efficiency.\n\n\n\nInfrastructure and Range Anxiety:\n\nPro-EV Perspective: The development of charging infrastructure and improvements in battery technology are mitigating range anxiety, making EVs more practical for everyday use.\nPro-Gas Car Perspective: Gasoline vehicles have a well-established refueling infrastructure, providing convenience and ease of use without the need for extensive charging networks.\n\n\n\nEconomic Factors:\n\nPro-EV Perspective: Over time, as battery costs decrease and economies of scale are achieved, electric vehicles are expected to become more affordable, potentially reaching price parity with traditional cars.\nPro-Gas Car Perspective: Gasoline vehicles currently have a cost advantage in terms of manufacturing and maintenance, and the existing infrastructure supports their continued dominance.\n\n\n\nConsumer Adoption and Preferences:\n\nPro-EV Perspective: Growing awareness of environmental issues, government incentives, and changing consumer preferences are driving increased adoption of electric vehicles.\nPro-Gas Car Perspective: Consumer habits and perceptions, including concerns about charging infrastructure, vehicle range, and the initial cost of EVs, may slow down widespread adoption."
  },
  {
    "objectID": "introduction.html#future-trends-and-different-points-of-views",
    "href": "introduction.html#future-trends-and-different-points-of-views",
    "title": "The competition between electric cars and gas cars",
    "section": "Future Trends and Different Points of Views:",
    "text": "Future Trends and Different Points of Views:\n\nMarket Share Predictions:\n\nOptimistic View: Some experts predict a significant increase in EV market share, expecting a transition to an all-electric future as technology improves and consumers become more environmentally conscious.\nCautious View: Skeptics argue that gasoline vehicles will maintain a substantial market share for an extended period, as challenges such as battery production limitations and charging infrastructure development persist.\n\n\n\nGovernment Policies:\n\nSupportive Policies: Governments worldwide are implementing policies to encourage EV adoption, including subsidies, tax incentives, and regulations promoting cleaner transportation.\nMarket-Led Transition: Some argue that market forces, rather than government intervention, should guide the transition to electric vehicles, allowing for a more organic and sustainable shift.\n\n\n\nEnergy Source Diversification:\n\nRenewable Energy Integration: A positive outlook emphasizes the integration of renewable energy sources into the electricity grid, enhancing the environmental benefits of electric vehicles.\nEnergy Source Dependence: Critics express concerns about the environmental impact of increased electricity demand, especially if it relies on non-renewable energy sources.\n\n\n\nInnovation and Disruption:\n\nDisruptive Innovation: Proponents of EVs argue that they represent a disruptive innovation that will reshape the automotive industry, with new entrants and technologies challenging the status quo.\nIncremental Change: Skeptics suggest that the automotive industry will evolve gradually, with improvements in internal combustion engine efficiency and the coexistence of various propulsion technologies.\n\n\n\nIn conclusion, the competition between electric and gasoline vehicles is a multifaceted issue, with ongoing debates about the environmental impact, technological advancements, infrastructure development, economic factors, and consumer preferences. The future trajectory will likely involve a combination of market-driven forces, government policies, and technological breakthroughs, and diverse perspectives will continue to shape the discourse in this rapidly evolving landscape."
  },
  {
    "objectID": "introduction.html#questions-i-would-to-answer-to-better-explore-my-topic",
    "href": "introduction.html#questions-i-would-to-answer-to-better-explore-my-topic",
    "title": "The competition between electric cars and gas cars",
    "section": "10 Questions I would to answer to better explore my topic:",
    "text": "10 Questions I would to answer to better explore my topic:\n\nConsumer Adoption Patterns:\nQuestion: What are the key factors influencing consumer adoption of electric vehicles over time, and how do these factors vary across different regions and demographics?\n\n\nEnvironmental Impact Analysis:\nQuestion: Can we quantify and compare the overall environmental impact, including carbon emissions, of electric vehicles and gasoline-powered cars, considering factors such as manufacturing, operation, and end-of-life disposal?\n\n\nCharging Infrastructure Optimization:\nQuestion: Where are the optimal locations for expanding electric vehicle charging infrastructure to maximize accessibility and usage, taking into account population density, travel patterns, and existing infrastructure?\n\n\nEconomic Viability and Affordability:\nQuestion: How have the costs of electric vehicles and traditional cars evolved over time, and what factors contribute to the perceived affordability of each option? Can we predict future price trends?\n\n\nBattery Technology Analysis:\nQuestion: What advancements in battery technology have had the most significant impact on the performance and cost-effectiveness of electric vehicles, and how do these innovations compare with improvements in internal combustion engine technology?\n\n\nGovernment Policy Impact:\nQuestion: How do government policies, such as subsidies, incentives, and regulations, influence the market share and growth of electric vehicles? Can we identify policy measures that have been particularly effective?\n\n\nEnergy Source Analysis:\nQuestion: What is the current and projected mix of energy sources used to generate electricity for electric vehicles, and how does this impact the overall environmental benefits of EVs in different regions? Consumer Perception and Sentiment Analysis:\nQuestion: How do sentiments expressed on social media and online forums regarding electric vehicles versus gasoline cars correlate with actual market trends? Can sentiment analysis predict shifts in consumer preferences?\n\n\nPredictive Maintenance for EVs:\nQuestion: Can we develop predictive maintenance models for electric vehicles based on data related to battery health, charging patterns, and driving conditions, to enhance the reliability and longevity of EVs?\n\n\nMarket Share Forecasting:\nQuestion: Using historical sales data, technological trends, and economic indicators, can we build a model to forecast the future market share of electric vehicles versus traditional cars, taking into account regional variations and global market dynamics?"
  },
  {
    "objectID": "datagather.html",
    "href": "datagather.html",
    "title": "Data gathering",
    "section": "",
    "text": "In recent years, the automotive industry has witnessed a transformative shift towards sustainable and eco-friendly transportation solutions, exemplified by the increasing popularity of electric vehicles (EVs). Among the trailblazers in this revolution is Tesla, a pioneering company that has significantly contributed to the rise of electric cars on our roads. As society embraces cleaner energy alternatives, concerns about the safety of electric cars, particularly in comparison to their traditional gas-powered counterparts, have become a focal point of discussion. This study endeavors to conduct a comprehensive analysis of traffic accidents involving electric cars, with a specific emphasis on Tesla vehicles, and draw meaningful comparisons with incidents involving traditional gas-powered cars. By examining relevant data, trends, and contributing factors, this research aims to shed light on the safety landscape of electric vehicles, providing valuable insights for both policymakers and the general public as we navigate the evolving landscape of transportation technologies."
  },
  {
    "objectID": "datagather.html#introduction",
    "href": "datagather.html#introduction",
    "title": "Data gathering",
    "section": "",
    "text": "In recent years, the automotive industry has witnessed a transformative shift towards sustainable and eco-friendly transportation solutions, exemplified by the increasing popularity of electric vehicles (EVs). Among the trailblazers in this revolution is Tesla, a pioneering company that has significantly contributed to the rise of electric cars on our roads. As society embraces cleaner energy alternatives, concerns about the safety of electric cars, particularly in comparison to their traditional gas-powered counterparts, have become a focal point of discussion. This study endeavors to conduct a comprehensive analysis of traffic accidents involving electric cars, with a specific emphasis on Tesla vehicles, and draw meaningful comparisons with incidents involving traditional gas-powered cars. By examining relevant data, trends, and contributing factors, this research aims to shed light on the safety landscape of electric vehicles, providing valuable insights for both policymakers and the general public as we navigate the evolving landscape of transportation technologies."
  },
  {
    "objectID": "datagather.html#first-dataset",
    "href": "datagather.html#first-dataset",
    "title": "Data gathering",
    "section": "First dataset:",
    "text": "First dataset:\n\nName: Tesla Deaths\nlink to the dataset: https://www.kaggle.com/datasets/thedevastator/tesla-accident-fatalities-analysis-and-statistic"
  },
  {
    "objectID": "datagather.html#summary-of-the-data",
    "href": "datagather.html#summary-of-the-data",
    "title": "Data gathering",
    "section": "Summary of the data:",
    "text": "Summary of the data:\n\nCase #: Unique identifier for each case. (String)\nYear: Year of the accident. (Integer)\nDate: Date of the accident. (Date)\nCountry: The country where the accident occurred. (String)\nState: State where the accident occurred. (String)\nDescription: Description of the accident. (String)\nDeaths: Number of Deaths (Int)\nTesla driver: Whether the Tesla driver was killed in the accident. (Boolean)\nTesla occupant: Whether a Tesla occupant was killed in the accident. (Boolean)\nOther Vehicle: whether the Tesla crashed another vehicle (Boolean)\nCyclist/ Peds: Whether Tesla killed a Cyclist/Pedestrian in the accident. (Boolean)\nSLA + cycl / peds: Tesla + Cycle / Pedestrian (Boolean)\nAutopilot claimed: People who have claimed Auto Pilot (Boolean)\nVerified Tesla Autopilot Death: Verified Tesla Autopilot Death (Boolean)\nVerified Tesla Autopilot Death & All Deaths Reported to NHTSA SGO : Verified Tesla\nAutopilot Death & All Deaths Reported to NHTSA SGO (Boolean)\nSource: Source of the data. (String)\nSource: Source of the data. (String)\nSource: Source of the data. (String)\nNote: Note (String)\nModel: Model of the Tesla vehicle involved in the accident. (String)\nSource: Source of the data. (String)\nDeceased 1: 1st Dead person’s Name (String)\nDeceased 2: 2nd Dead person’s Name (String)\nDeceased 3: 3rd Dead person’s Name (String)\nDeceased 4: 4th Dead person’s Name (String)\n\n\nQuick exploration of the data:\n\n\nCode\nimport pandas as pd\nimport numpy as np\nimport missingno as msno\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport nltk\nnltk.download('punkt')\nnltk.download('averaged_perceptron_tagger')\nfrom nltk import word_tokenize\nfrom nltk.stem import WordNetLemmatizer\nfrom nltk.corpus import wordnet\n\n\n[nltk_data] Downloading package punkt to\n[nltk_data]     C:\\Users\\23898\\AppData\\Roaming\\nltk_data...\n[nltk_data]   Package punkt is already up-to-date!\n[nltk_data] Downloading package averaged_perceptron_tagger to\n[nltk_data]     C:\\Users\\23898\\AppData\\Roaming\\nltk_data...\n[nltk_data]   Package averaged_perceptron_tagger is already up-to-\n[nltk_data]       date!\n\n\n\n\nOverview of the dataset\n\n\nCode\ndf = pd.read_csv(\"./Data/Tesla Deaths - Deaths.csv\")\ndf.head()\n\n\n\n\n\n\n\n\n\nCase #\nYear\nDate\nCountry\nState\nDescription\nDeaths\nTesla driver\nTesla occupant\nOther vehicle\n...\nVerified Tesla Autopilot Deaths\nVerified Tesla Autopilot Deaths + All Deaths Reported to NHTSA SGO\nUnnamed: 16\nUnnamed: 17\nSource\nNote\nDeceased 1\nDeceased 2\nDeceased 3\nDeceased 4\n\n\n\n\n0\n294.0\n2022.0\n1/17/2023\nUSA\nCA\nTesla crashes into back of semi\n1.0\n1\n-\n-\n...\n-\n-\nhttps://web.archive.org/web/20221222203930/ht...\nhttps://web.archive.org/web/20221222203930/ht...\nhttps://web.archive.org/web/20230118162813/ht...\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n1\n293.0\n2022.0\n1/7/2023\nCanada\n-\nTesla crashes\n1.0\n1\n-\n-\n...\n-\n-\nhttps://web.archive.org/web/20221222203930/ht...\nhttps://web.archive.org/web/20221222203930/ht...\nhttps://web.archive.org/web/20230109041434/ht...\nNaN\nTaren Singh Lal\nNaN\nNaN\nNaN\n\n\n2\n292.0\n2022.0\n1/7/2023\nUSA\nWA\nTesla hits pole, catches on fire\n1.0\n-\n1\n-\n...\n-\n-\nhttps://web.archive.org/web/20221222203930/ht...\nhttps://web.archive.org/web/20221222203930/ht...\nhttps://web.archive.org/web/20230107232745/ht...\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n3\n291.0\n2022.0\n12/22/2022\nUSA\nGA\nTesla crashes and burns\n1.0\n1\n-\n-\n...\n-\n-\nhttps://web.archive.org/web/20221222203930/ht...\nhttps://web.archive.org/web/20221222203930/ht...\nhttps://web.archive.org/web/20221222203930/ht...\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n4\n290.0\n2022.0\n12/19/2022\nCanada\n-\nTesla crashes into storefront\n1.0\n-\n-\n-\n...\n-\n-\nhttps://web.archive.org/web/20221223203725/ht...\nhttps://web.archive.org/web/20221223203725/ht...\nhttps://web.archive.org/web/20221223203725/ht...\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n\n\n5 rows × 24 columns"
  },
  {
    "objectID": "datagather.html#second-dataset",
    "href": "datagather.html#second-dataset",
    "title": "Data gathering",
    "section": "Second dataset:",
    "text": "Second dataset:\n\nName: UK Road Safety: Traffic Accidents and Vehicles\n\n\nlink: https://www.kaggle.com/datasets/tsiaras/uk-road-safety-accidents-and-vehicles"
  },
  {
    "objectID": "datagather.html#summary",
    "href": "datagather.html#summary",
    "title": "Data gathering",
    "section": "Summary:",
    "text": "Summary:\nThe UK government collects and publishes (usually on an annual basis) detailed information about traffic accidents across the country. This information includes, but is not limited to, geographical locations, weather conditions, type of vehicles, number of casualties and vehicle manoeuvres, making this a very interesting and comprehensive dataset for analysis and research.\nThe creation of this dataset was inspired by the one previously published by Dave Fisher-Hickey. However, this current dataset features the following significant improvements over its predecessor:\n\nIt covers a wider date range of events.\nMost of the coded data variables have been transformed to textual strings using relevant lookup tables, enabling more efficient and “human-readable” analysis.\nIt features detailed information about the vehicles involved in the accidents.\n\n\nOverview of the dataset\n\n\nCode\ndata = pd.read_csv('./Data/RoadAccident.csv')\ndata.drop(['Accident_Index','Datetime'], axis = 1,inplace=True) \ndata\n\n\n\n\n\n\n\n\n\nLatitude\nLongitude\nRegion\nUrban_or_Rural_Area\nX1st_Road_Class\nDriver_IMD_Decile\nSpeed_limit\nRoad_Type\nRoad_Surface_Conditions\nWeather\n...\nJunction_Detail\nJunction_Location\nX1st_Point_of_Impact\nDriver_Journey_Purpose\nEngine_CC\nPropulsion_Code\nVehicle_Make\nVehicle_Category\nVehicle_Manoeuvre\nAccident_Severity\n\n\n\n\n0\n51.495653\n-0.179097\nLondon\nUrban\nC\n7\n30\nSingle carriageway\nDry\nFine\n...\nNot at junction or within 20 metres\nNot at or within 20 metres of junction\nFront\nOther/Not known\n1781\nPetrol\nAudi\nCar\nGoing ahead\nSlight\n\n\n1\n51.499635\n-0.209915\nLondon\nUrban\nA\n3\n30\nSingle carriageway\nDry\nFine\n...\nMore than 4 arms (not roundabout)\nMid Junction - on roundabout or on main road\nOffside\nOther/Not known\n2987\nHeavy oil\nMercedes\nCar\nWaiting to go\nSlight\n\n\n2\n51.492515\n-0.168130\nLondon\nUrban\nUnclassified\n5\n30\nSingle carriageway\nDry\nFine\n...\nCrossroads\nMid Junction - on roundabout or on main road\nFront\nJourney as part of work\n998\nPetrol\nNissan\nCar\nGoing ahead\nSlight\n\n\n3\n51.504784\n-0.193863\nLondon\nUrban\nA\n2\n30\nSingle carriageway\nDry\nFine\n...\nT or staggered junction\nMid Junction - on roundabout or on main road\nOffside\nJourney as part of work\n2179\nHeavy oil\nCitroen\nVan\nTurning right\nSlight\n\n\n4\n51.522072\n-0.212927\nLondon\nUrban\nB\n3\n30\nSingle carriageway\nWet or damp\nFine\n...\nT or staggered junction\nApproaching junction or waiting/parked at junc...\nNearside\nJourney as part of work\n2198\nHeavy oil\nFord\nVan\nOvertaking\nSlight\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n75545\n56.531008\n-2.945169\nScotland\nRural\nA\n9\n70\nDual carriageway\nWet or damp\nRaining\n...\nT or staggered junction\nApproaching junction or waiting/parked at junc...\nFront\nOther/Not known\n2199\nHeavy oil\nKia\nCar\nGoing ahead\nFatal_Serious\n\n\n75546\n56.677867\n-3.688719\nScotland\nRural\nA\n10\n70\nDual carriageway\nDry\nFine\n...\nT or staggered junction\nCleared junction or waiting/parked at junction...\nFront\nOther/Not known\n1598\nPetrol\nVauxhall\nCar\nGoing ahead\nFatal_Serious\n\n\n75547\n55.720385\n-2.654035\nScotland\nRural\nA\n9\n60\nSingle carriageway\nDry\nFine\n...\nNot at junction or within 20 metres\nNot at or within 20 metres of junction\nFront\nOther/Not known\n1598\nHeavy oil\nAudi\nCar\nGoing ahead\nFatal_Serious\n\n\n75548\n54.850068\n-4.925632\nScotland\nRural\nB\n5\n60\nSingle carriageway\nDry\nFine\n...\nNot at junction or within 20 metres\nNot at or within 20 metres of junction\nFront\nOther/Not known\n1000\nPetrol\nBMW\nMotorcycle\nGoing ahead\nFatal_Serious\n\n\n75549\n55.158556\n-4.195310\nScotland\nRural\nA\n2\n60\nSingle carriageway\nDry\nFine\n...\nNot at junction or within 20 metres\nNot at or within 20 metres of junction\nFront\nJourney as part of work\n2143\nHeavy oil\nMercedes\nVan\nGoing ahead\nFatal_Serious\n\n\n\n\n75550 rows × 31 columns\n\n\n\n\n\nCheck for the dimension of the data set\n\n\nCode\nprint('There are a total of {} rows and {} columns in the original dataset'.format(data.shape[0],data.shape[1]))\n\n\nThere are a total of 75550 rows and 31 columns in the original dataset\n\n\n\n\nCheck for null values\n\n\nCode\nprint(\"Any null values in the original dataset?: {}\".format(data.isnull().values.any()))\n\n\nAny null values in the original dataset?: False"
  },
  {
    "objectID": "datagather.html#summary-1",
    "href": "datagather.html#summary-1",
    "title": "Data gathering",
    "section": "Summary:",
    "text": "Summary:\nI obtained the ensuing dataset by utilizing the News-API to search for articles pertaining to Tesla accidents. I also processed and curated the articles, saving them in a structured dataset for subsequent analysis. Furthermore, I generated a word cloud to see prominent keywords within the corpus.\n\n\nCode\nimport requests\nimport json\nimport re\nimport pandas as pd\nfrom sklearn.feature_extraction.text import CountVectorizer\nAPI_KEY='2a0218c20cdd48d29d44f1271c267a25'\nbaseURL = \"https://newsapi.org/v2/everything?\"\n\ntotal_requests= 20\nverbose=True\nTOPIC='Tesla accident'\nURLpost = {'apiKey': API_KEY,\n            'q': '+'+TOPIC,\n            'sortBy': 'relevancy',\n            'totalRequests': 1}\n\nresponse = requests.get(baseURL, URLpost)  \nresponse = response.json() \n\n# PRETTY PRINT\n# https://www.digitalocean.com/community/tutorials/python-pretty-print-json\n\nfrom datetime import datetime\ntimestamp = datetime.now().strftime(\"%Y-%m-%d-H%H-M%M-S%S\")\nwith open(timestamp+'-newapi-raw-data.json', 'w') as file_georetown:\n    json.dump(response, file_georetown, indent=4)\n\ndef string_cleaner(input_string):\n    try: \n        out=re.sub(r\"\"\"\n                    [,.;@#?!&$-]+  # Accept one or more copies of punctuation\n                    \\ *           # plus zero or more copies of a space,\n                    \"\"\",\n                    \" \",          # and replace it with a single space\n                    input_string, flags=re.VERBOSE)\n\n        #REPLACE SELECT CHARACTERS WITH NOTHING\n        out = re.sub('[’.]+', '', input_string)\n\n        #ELIMINATE DUPLICATE WHITESPACES USING WILDCARDS\n        out = re.sub(r'\\s+', ' ', out)\n\n        #CONVERT TO LOWER CASE\n        out=out.lower()\n    except:\n        print(\"ERROR\")\n        out=''\n    return out\n\narticle_list=response['articles']   \narticle_keys=article_list[0].keys()\nindex=0\ncleaned_data1=[];  \nfor article in article_list:\n    tmp=[]\n    if(verbose):\n        print(\"#------------------------------------------\")\n        print(\"#\",index)\n        print(\"#------------------------------------------\")\n\n    for key in article_keys:\n        if(verbose):\n            print(\"----------------\")\n            print(key)\n            print(article[key])\n            print(\"----------------\")\n\n        if(key=='source'):\n            src=string_cleaner(article[key]['name'])\n            tmp.append(src) \n\n        if(key=='author'):\n            author=string_cleaner(article[key])\n\n            if(src in author): \n                print(\" AUTHOR ERROR:\",author);author='NA'\n            tmp.append(author)\n\n        if(key=='title'):\n            tmp.append(string_cleaner(article[key]))\n\n        if(key=='description'):\n            tmp.append(string_cleaner(article[key]))\n\n        if(key=='content'):\n            tmp.append(string_cleaner(article[key]))\n\n        if(key=='publishedAt'):\n           #DEFINE DATA PATERN FOR RE TO CHECK  .* --&gt; wildcard\n            ref = re.compile('.*-.*-.*T.*:.*:.*Z')\n            date=article[key]\n            if(not ref.match(date)):\n               print(\" DATE ERROR:\",date); date=\"NA\"\n            tmp.append(date)\n\n    cleaned_data1.append(tmp)\n    index+=1\n\ndf = pd.DataFrame(cleaned_data1).iloc[:, 2:4]\ndf.columns = [\"title\", \"description\"]\ndf.to_csv('./Data/newapiTesla.csv', index=False)\n\n\n\n\nCode\ndef generate_word_cloud(my_text):\n    from wordcloud import WordCloud, STOPWORDS\n    import matplotlib.pyplot as plt\n    def plot_cloud(wordcloud):\n        plt.figure(figsize=(40, 30))\n        plt.imshow(wordcloud) \n        plt.axis(\"off\")\n\n    wordcloud = WordCloud(\n        width = 3000,\n        height = 2000, \n        random_state=1, \n        background_color='salmon', \n        colormap='Pastel1', \n        collocations=False,\n        stopwords = STOPWORDS).generate(my_text)\n    plot_cloud(wordcloud)\n    plt.show()\ndf = pd.read_csv(\"./Data/newapiTesla.csv\")\ntext = df.iat[0,1] + df.iat[1,1] + df.iat[2,1]\ngenerate_word_cloud(text)"
  },
  {
    "objectID": "data.html",
    "href": "data.html",
    "title": "",
    "section": "",
    "text": "link to data: https://github.com/anly501/dsan-5000-project-WillWangUNC/tree/main/dsan-website/5000-website/5000-website-Zenan/Data"
  },
  {
    "objectID": "dataclean.html",
    "href": "dataclean.html",
    "title": "Data gathering",
    "section": "",
    "text": "Code\nimport pandas as pd\nimport numpy as np\nimport missingno as msno\nimport matplotlib.pyplot as plt\nimport seaborn as sns\ndf = pd.read_csv(\"./Data/Tesla Deaths - Deaths.csv\")\n\n\n\n\n\n\nCode\nmsno.heatmap(df)\n\n\n&lt;Axes: &gt;\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nnew_df = pd.DataFrame()\nfor i in range(len(df.columns[:14]),1,-1):\n    new_df.insert(0,df.columns[i],df[df.columns[i]])\ndf = new_df\ndf.head()\n\n\n\n\n\n\n\n\n\nDate\nCountry\nState\nDescription\nDeaths\nTesla driver\nTesla occupant\nOther vehicle\nCyclists/ Peds\nTSLA+cycl / peds\nModel\nAutopilot claimed\nVerified Tesla Autopilot Deaths\n\n\n\n\n0\n1/17/2023\nUSA\nCA\nTesla crashes into back of semi\n1.0\n1\n-\n-\n-\n1\n-\n-\n-\n\n\n1\n1/7/2023\nCanada\n-\nTesla crashes\n1.0\n1\n-\n-\n-\n1\n-\n-\n-\n\n\n2\n1/7/2023\nUSA\nWA\nTesla hits pole, catches on fire\n1.0\n-\n1\n-\n-\n1\n-\n-\n-\n\n\n3\n12/22/2022\nUSA\nGA\nTesla crashes and burns\n1.0\n1\n-\n-\n-\n1\n-\n-\n-\n\n\n4\n12/19/2022\nCanada\n-\nTesla crashes into storefront\n1.0\n-\n-\n-\n1\n1\n-\n-\n-\n\n\n\n\n\n\n\n\n\nCode\nmsno.bar(df)\n\n\n&lt;Axes: &gt;\n\n\n\n\n\n\n\n\n\n\nCode\nfor i in range(5,10):\n    df[df.columns[i]] = df[df.columns[i]].fillna(\"-\")\nfor i in range(11,13):\n    df[df.columns[i]] = df[df.columns[i]].fillna('-')\nmsno.bar(df)\n\n\n&lt;Axes: &gt;\n\n\n\n\n\n\n\n\n\n\nCode\ndf = df.dropna()\nmsno.bar(df)\n\n\n&lt;Axes: &gt;\n\n\n\n\n\n\n\nCode\ndf.columns = ['Date','Country','State','Description','Deaths',\"Tesla_driver\",\"Tesla_occupant\",\"Other_vehicle\",\"CP\",\"tsla+cp\",\"Model\",\"Claimed\",\"VTAD\"]\ndf.head()\n\n\n\n\n\n\n\n\n\nDate\nCountry\nState\nDescription\nDeaths\nTesla_driver\nTesla_occupant\nOther_vehicle\nCP\ntsla+cp\nModel\nClaimed\nVTAD\n\n\n\n\n0\n1/17/2023\nUSA\nCA\nTesla crashes into back of semi\n1.0\n1\n-\n-\n-\n1\n-\n-\n-\n\n\n1\n1/7/2023\nCanada\n-\nTesla crashes\n1.0\n1\n-\n-\n-\n1\n-\n-\n-\n\n\n2\n1/7/2023\nUSA\nWA\nTesla hits pole, catches on fire\n1.0\n-\n1\n-\n-\n1\n-\n-\n-\n\n\n3\n12/22/2022\nUSA\nGA\nTesla crashes and burns\n1.0\n1\n-\n-\n-\n1\n-\n-\n-\n\n\n4\n12/19/2022\nCanada\n-\nTesla crashes into storefront\n1.0\n-\n-\n-\n1\n1\n-\n-\n-\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\ndata = pd.read_csv('C:/Users/23898/OneDrive/桌面/DSAN_5000/HW-1/dsan-5000-project-WillWangUNC/dsan-website/5000-website/5000-website-Zenan/Data/RoadAccident.csv')\ncolumn_datatypes = set()\nfor column in data.columns:\n    column_datatypes.add(str(data[column].dtype))\nprint(\"The dataset contains {} different data types and they are: {}\".format(len(column_datatypes), \", \".join(column_datatypes)))\nX = data.drop(columns='Accident_Severity')\ny = data['Accident_Severity']\ncount = pd.value_counts(y, sort = True)\ncount.plot(kind = 'bar', rot=0)\nplt.title(\"Distribution of Accident Severity \")\nplt.xlabel(\"Result\")\nplt.ylabel(\"Count\")\n\n\nThe dataset contains 3 different data types and they are: int64, float64, object\n\n\nText(0, 0.5, 'Count')\n\n\n\n\n\n\n\n\n\n\nCode\nnumerical_features = list()\ncategorical_features = list()\nfor column in X.columns:\n    # In the dataset we only have float and int64.\n    if (data[column].dtype == 'float64' or data[column].dtype == 'int64'):\n        numerical_features.append(column)\n    # Categorical\n    elif (data[column].dtype == 'object'):\n        categorical_features.append(column)\nprint('There are {} numerical features in the dataset.'.format(len(numerical_features)))\n\n\nThere are 15 numerical features in the dataset.\n\n\n\n\n\n\n\nCode\nX_num_total = X[numerical_features]\nX_num_total.hist(bins=60,figsize=(20, 10))\nplt.show()\nprint('Number of uniques values of Accident Index: {}'.format(X_num_total['Accident_Index'].nunique()))\n\n\n\n\n\nNumber of uniques values of Accident Index: 75550\n\n\n\n\n\n\n\n\n\n\nCode\nprint('There are {} categorical features in the dataset.'.format(len(categorical_features)))\nX_cat_total = X[categorical_features]\nprint('Unique values for each categorical column are:\\n {}'.format(X_cat_total.nunique()))\n\n\nThere are 17 categorical features in the dataset.\nUnique values for each categorical column are:\n Region                        11\nUrban_or_Rural_Area            2\nX1st_Road_Class                6\nRoad_Type                      5\nRoad_Surface_Conditions        5\nWeather                        6\nHigh_Wind                      2\nLights                         4\nDatetime                   67926\nJunction_Detail                8\nJunction_Location              9\nX1st_Point_of_Impact           5\nDriver_Journey_Purpose         5\nPropulsion_Code                2\nVehicle_Make                  25\nVehicle_Category               6\nVehicle_Manoeuvre             11\ndtype: int64\n\n\n\n\nCode\ndata['Datetime']\n\n\n0        1/19/2010 17:30\n1         2/8/2010 11:24\n2          3/3/2010 6:25\n3         3/4/2010 13:35\n4        3/12/2010 16:05\n              ...       \n75545     3/6/2014 18:20\n75546    5/24/2014 15:50\n75547     9/8/2014 12:06\n75548    4/18/2014 15:52\n75549    8/27/2014 16:16\nName: Datetime, Length: 75550, dtype: object\n\n\n\n\n\n\n\nCode\nX = X.drop(columns=['Accident_Index','Datetime'])\n\n\n\n\n\n\n\nCode\nplt.subplots(figsize=(15,8))\nsns.heatmap(X_num_total.corr(), cmap=\"YlGnBu\", annot=True)\nplt.title('Correlation Matrix')\nplt.show()"
  },
  {
    "objectID": "dataclean.html#introduction",
    "href": "dataclean.html#introduction",
    "title": "Data Cleaning",
    "section": "",
    "text": "Link to raw (unprocessed) data: https://github.com/anly501/dsan-5000-project-WillWangUNC/tree/main/dsan-website/5000-website/5000-website-Zenan/Data Link to cleaned data: https://github.com/anly501/dsan-5000-project-WillWangUNC/tree/main/dsan-website/5000-website/5000-website-Zenan/cleandata"
  },
  {
    "objectID": "dataclean.html#first-dataset-tesla-deaths",
    "href": "dataclean.html#first-dataset-tesla-deaths",
    "title": "Data gathering",
    "section": "",
    "text": "Code\nimport pandas as pd\nimport numpy as np\nimport missingno as msno\nimport matplotlib.pyplot as plt\nimport seaborn as sns\ndf = pd.read_csv(\"./Data/Tesla Deaths - Deaths.csv\")\n\n\n\n\n\n\nCode\nmsno.heatmap(df)\n\n\n&lt;Axes: &gt;\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nnew_df = pd.DataFrame()\nfor i in range(len(df.columns[:14]),1,-1):\n    new_df.insert(0,df.columns[i],df[df.columns[i]])\ndf = new_df\ndf.head()\n\n\n\n\n\n\n\n\n\nDate\nCountry\nState\nDescription\nDeaths\nTesla driver\nTesla occupant\nOther vehicle\nCyclists/ Peds\nTSLA+cycl / peds\nModel\nAutopilot claimed\nVerified Tesla Autopilot Deaths\n\n\n\n\n0\n1/17/2023\nUSA\nCA\nTesla crashes into back of semi\n1.0\n1\n-\n-\n-\n1\n-\n-\n-\n\n\n1\n1/7/2023\nCanada\n-\nTesla crashes\n1.0\n1\n-\n-\n-\n1\n-\n-\n-\n\n\n2\n1/7/2023\nUSA\nWA\nTesla hits pole, catches on fire\n1.0\n-\n1\n-\n-\n1\n-\n-\n-\n\n\n3\n12/22/2022\nUSA\nGA\nTesla crashes and burns\n1.0\n1\n-\n-\n-\n1\n-\n-\n-\n\n\n4\n12/19/2022\nCanada\n-\nTesla crashes into storefront\n1.0\n-\n-\n-\n1\n1\n-\n-\n-\n\n\n\n\n\n\n\n\n\nCode\nmsno.bar(df)\n\n\n&lt;Axes: &gt;\n\n\n\n\n\n\n\n\n\n\nCode\nfor i in range(5,10):\n    df[df.columns[i]] = df[df.columns[i]].fillna(\"-\")\nfor i in range(11,13):\n    df[df.columns[i]] = df[df.columns[i]].fillna('-')\nmsno.bar(df)\n\n\n&lt;Axes: &gt;\n\n\n\n\n\n\n\n\n\n\nCode\ndf = df.dropna()\nmsno.bar(df)\n\n\n&lt;Axes: &gt;\n\n\n\n\n\n\n\nCode\ndf.columns = ['Date','Country','State','Description','Deaths',\"Tesla_driver\",\"Tesla_occupant\",\"Other_vehicle\",\"CP\",\"tsla+cp\",\"Model\",\"Claimed\",\"VTAD\"]\ndf.head()\n\n\n\n\n\n\n\n\n\nDate\nCountry\nState\nDescription\nDeaths\nTesla_driver\nTesla_occupant\nOther_vehicle\nCP\ntsla+cp\nModel\nClaimed\nVTAD\n\n\n\n\n0\n1/17/2023\nUSA\nCA\nTesla crashes into back of semi\n1.0\n1\n-\n-\n-\n1\n-\n-\n-\n\n\n1\n1/7/2023\nCanada\n-\nTesla crashes\n1.0\n1\n-\n-\n-\n1\n-\n-\n-\n\n\n2\n1/7/2023\nUSA\nWA\nTesla hits pole, catches on fire\n1.0\n-\n1\n-\n-\n1\n-\n-\n-\n\n\n3\n12/22/2022\nUSA\nGA\nTesla crashes and burns\n1.0\n1\n-\n-\n-\n1\n-\n-\n-\n\n\n4\n12/19/2022\nCanada\n-\nTesla crashes into storefront\n1.0\n-\n-\n-\n1\n1\n-\n-\n-"
  },
  {
    "objectID": "dataclean.html#second-data-uk-road-safety-traffic-accidents-and-vehicles",
    "href": "dataclean.html#second-data-uk-road-safety-traffic-accidents-and-vehicles",
    "title": "Data gathering",
    "section": "",
    "text": "Code\ndata = pd.read_csv('C:/Users/23898/OneDrive/桌面/DSAN_5000/HW-1/dsan-5000-project-WillWangUNC/dsan-website/5000-website/5000-website-Zenan/Data/RoadAccident.csv')\ncolumn_datatypes = set()\nfor column in data.columns:\n    column_datatypes.add(str(data[column].dtype))\nprint(\"The dataset contains {} different data types and they are: {}\".format(len(column_datatypes), \", \".join(column_datatypes)))\nX = data.drop(columns='Accident_Severity')\ny = data['Accident_Severity']\ncount = pd.value_counts(y, sort = True)\ncount.plot(kind = 'bar', rot=0)\nplt.title(\"Distribution of Accident Severity \")\nplt.xlabel(\"Result\")\nplt.ylabel(\"Count\")\n\n\nThe dataset contains 3 different data types and they are: int64, float64, object\n\n\nText(0, 0.5, 'Count')\n\n\n\n\n\n\n\n\n\n\nCode\nnumerical_features = list()\ncategorical_features = list()\nfor column in X.columns:\n    # In the dataset we only have float and int64.\n    if (data[column].dtype == 'float64' or data[column].dtype == 'int64'):\n        numerical_features.append(column)\n    # Categorical\n    elif (data[column].dtype == 'object'):\n        categorical_features.append(column)\nprint('There are {} numerical features in the dataset.'.format(len(numerical_features)))\n\n\nThere are 15 numerical features in the dataset.\n\n\n\n\n\n\n\nCode\nX_num_total = X[numerical_features]\nX_num_total.hist(bins=60,figsize=(20, 10))\nplt.show()\nprint('Number of uniques values of Accident Index: {}'.format(X_num_total['Accident_Index'].nunique()))\n\n\n\n\n\nNumber of uniques values of Accident Index: 75550"
  },
  {
    "objectID": "dataclean.html#now-we-should-check-if-there-is-any-categorical-variable-that-is-uninformative-and-should-be-dropped",
    "href": "dataclean.html#now-we-should-check-if-there-is-any-categorical-variable-that-is-uninformative-and-should-be-dropped",
    "title": "Data gathering",
    "section": "",
    "text": "Code\nprint('There are {} categorical features in the dataset.'.format(len(categorical_features)))\nX_cat_total = X[categorical_features]\nprint('Unique values for each categorical column are:\\n {}'.format(X_cat_total.nunique()))\n\n\nThere are 17 categorical features in the dataset.\nUnique values for each categorical column are:\n Region                        11\nUrban_or_Rural_Area            2\nX1st_Road_Class                6\nRoad_Type                      5\nRoad_Surface_Conditions        5\nWeather                        6\nHigh_Wind                      2\nLights                         4\nDatetime                   67926\nJunction_Detail                8\nJunction_Location              9\nX1st_Point_of_Impact           5\nDriver_Journey_Purpose         5\nPropulsion_Code                2\nVehicle_Make                  25\nVehicle_Category               6\nVehicle_Manoeuvre             11\ndtype: int64\n\n\n\n\nCode\ndata['Datetime']\n\n\n0        1/19/2010 17:30\n1         2/8/2010 11:24\n2          3/3/2010 6:25\n3         3/4/2010 13:35\n4        3/12/2010 16:05\n              ...       \n75545     3/6/2014 18:20\n75546    5/24/2014 15:50\n75547     9/8/2014 12:06\n75548    4/18/2014 15:52\n75549    8/27/2014 16:16\nName: Datetime, Length: 75550, dtype: object\n\n\n\n\n\n\nCode\nX = X.drop(columns=['Accident_Index','Datetime'])"
  },
  {
    "objectID": "dataclean.html#check-the-correlation-between-the-numerical-features-to-see-if-there-is-any-further-issue",
    "href": "dataclean.html#check-the-correlation-between-the-numerical-features-to-see-if-there-is-any-further-issue",
    "title": "Data gathering",
    "section": "",
    "text": "Code\nplt.subplots(figsize=(15,8))\nsns.heatmap(X_num_total.corr(), cmap=\"YlGnBu\", annot=True)\nplt.title('Correlation Matrix')\nplt.show()"
  },
  {
    "objectID": "dataclean.html#second-data-uk-road-safety-traffic-accidents-and-vehicles-gas-car",
    "href": "dataclean.html#second-data-uk-road-safety-traffic-accidents-and-vehicles-gas-car",
    "title": "Data gathering",
    "section": "",
    "text": "Code\ndata = pd.read_csv('C:/Users/23898/OneDrive/桌面/DSAN_5000/HW-1/dsan-5000-project-WillWangUNC/dsan-website/5000-website/5000-website-Zenan/Data/RoadAccident.csv')\ncolumn_datatypes = set()\nfor column in data.columns:\n    column_datatypes.add(str(data[column].dtype))\nprint(\"The dataset contains {} different data types and they are: {}\".format(len(column_datatypes), \", \".join(column_datatypes)))\nX = data.drop(columns='Accident_Severity')\ny = data['Accident_Severity']\ncount = pd.value_counts(y, sort = True)\ncount.plot(kind = 'bar', rot=0)\nplt.title(\"Distribution of Accident Severity \")\nplt.xlabel(\"Result\")\nplt.ylabel(\"Count\")\n\n\nThe dataset contains 3 different data types and they are: int64, float64, object\n\n\nText(0, 0.5, 'Count')\n\n\n\n\n\n\n\n\n\n\nCode\nnumerical_features = list()\ncategorical_features = list()\nfor column in X.columns:\n    # In the dataset we only have float and int64.\n    if (data[column].dtype == 'float64' or data[column].dtype == 'int64'):\n        numerical_features.append(column)\n    # Categorical\n    elif (data[column].dtype == 'object'):\n        categorical_features.append(column)\nprint('There are {} numerical features in the dataset.'.format(len(numerical_features)))\n\n\nThere are 15 numerical features in the dataset.\n\n\n\n\n\n\n\nCode\nX_num_total = X[numerical_features]\nX_num_total.hist(bins=60,figsize=(20, 10))\nplt.show()\nprint('Number of uniques values of Accident Index: {}'.format(X_num_total['Accident_Index'].nunique()))\n\n\n\n\n\nNumber of uniques values of Accident Index: 75550\n\n\n\n\n\n\n\n\n\n\nCode\nprint('There are {} categorical features in the dataset.'.format(len(categorical_features)))\nX_cat_total = X[categorical_features]\nprint('Unique values for each categorical column are:\\n {}'.format(X_cat_total.nunique()))\n\n\nThere are 17 categorical features in the dataset.\nUnique values for each categorical column are:\n Region                        11\nUrban_or_Rural_Area            2\nX1st_Road_Class                6\nRoad_Type                      5\nRoad_Surface_Conditions        5\nWeather                        6\nHigh_Wind                      2\nLights                         4\nDatetime                   67926\nJunction_Detail                8\nJunction_Location              9\nX1st_Point_of_Impact           5\nDriver_Journey_Purpose         5\nPropulsion_Code                2\nVehicle_Make                  25\nVehicle_Category               6\nVehicle_Manoeuvre             11\ndtype: int64\n\n\n\n\nCode\ndata['Datetime']\n\n\n0        1/19/2010 17:30\n1         2/8/2010 11:24\n2          3/3/2010 6:25\n3         3/4/2010 13:35\n4        3/12/2010 16:05\n              ...       \n75545     3/6/2014 18:20\n75546    5/24/2014 15:50\n75547     9/8/2014 12:06\n75548    4/18/2014 15:52\n75549    8/27/2014 16:16\nName: Datetime, Length: 75550, dtype: object\n\n\n\n\n\n\n\nCode\nX = X.drop(columns=['Accident_Index','Datetime'])\n\n\n\n\n\n\n\nCode\nplt.subplots(figsize=(15,8))\nsns.heatmap(X_num_total.corr(), cmap=\"YlGnBu\", annot=True)\nplt.title('Correlation Matrix')\nplt.show()"
  },
  {
    "objectID": "datagather.html#third-dataset-acquired-using-news-api-and-focused-on-the-topic-of-tesla-related-accident",
    "href": "datagather.html#third-dataset-acquired-using-news-api-and-focused-on-the-topic-of-tesla-related-accident",
    "title": "Data gathering",
    "section": "Third dataset (acquired using News-API and focused on the topic of ‘Tesla-related accident’)",
    "text": "Third dataset (acquired using News-API and focused on the topic of ‘Tesla-related accident’)"
  }
]